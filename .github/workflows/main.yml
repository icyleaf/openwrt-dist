name: Openwrt Build Bot
on:
  push:
    branches:
    - master
  schedule:
  - cron: 0 0 * * */7
  workflow_dispatch:
    # inputs:
    #   version:
    #     description: Which version of SDK
    #     required: true
    #     default: 'snapshots'
    #     type: choice
    #     options:
    #       - snapshots
    #       - 22.03.2
    #       - 21.02.05

jobs:
  dist:
    name: Build Openwrt Package
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        url:
        # - https://downloads.openwrt.org/releases/22.03.0/targets/ipq806x/generic/openwrt-sdk-22.03.0-ipq806x-generic_gcc-11.2.0_musl_eabi.Linux-x86_64.tar.xz
        # - https://downloads.openwrt.org/releases/22.03.0/targets/ipq40xx/generic/openwrt-sdk-22.03.0-ipq40xx-generic_gcc-11.2.0_musl_eabi.Linux-x86_64.tar.xz
        # - https://downloads.openwrt.org/releases/22.03.0/targets/ramips/mt7621/openwrt-sdk-22.03.0-ramips-mt7621_gcc-11.2.0_musl.Linux-x86_64.tar.xz
        # - https://downloads.openwrt.org/releases/22.03.0/targets/ath79/generic/openwrt-sdk-22.03.0-ath79-generic_gcc-11.2.0_musl.Linux-x86_64.tar.xz
        # - https://downloads.openwrt.org/releases/22.03.0/targets/ath79/nand/openwrt-sdk-22.03.0-ath79-nand_gcc-11.2.0_musl.Linux-x86_64.tar.xz
        # - https://downloads.openwrt.org/releases/22.03.2/targets/x86/64/openwrt-sdk-22.03.2-x86-64_gcc-11.2.0_musl.Linux-x86_64.tar.xz
        - https://downloads.immortalwrt.org/snapshots/targets/armvirt/64/immortalwrt-sdk-armvirt-64_gcc-12.2.0_musl.Linux-x86_64.tar.xz
        - https://downloads.immortalwrt.org/snapshots/targets/x86/64/immortalwrt-sdk-x86-64_gcc-12.2.0_musl.Linux-x86_64.tar.xz
        # - https://downloads.openwrt.org/releases/22.03.0/targets/rockchip/armv8/openwrt-sdk-22.03.0-rockchip-armv8_gcc-11.2.0_musl.Linux-x86_64.tar.xz
    steps:
    - uses: actions/checkout@master
    - name: Install requirements
      run: sudo apt install -y build-essential clang flex g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev libev-dev libc-ares-dev libudns-dev libncurses-dev
    - name: Prepare enviroment
      run: |
        echo "sdk_name=$(echo $(basename ${{ matrix.url }}) | head -c -8)" >> $GITHUB_ENV
        echo "sdk_branch=$(sed -n 's/.*targets\/\(\w*\)\/\(\w*\)\/.*/packages\/\1\/\2/p' <<< ${{ matrix.url }})" >> $GITHUB_ENV

    # NOTE: Unarchived file size over 10G can not cache by github action.
    # - name: Cache SDK
    #   id: cache-sdk
    #   uses: actions/cache@v3
    #   with:
    #     path: sdk
    #     key: ${{ runner.os }}-${{ env.sdk_name }}
    - name: Download Openwrt SDK
      # if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        curl ${{ matrix.url }} | tar -xJ
        mv ${{ env.sdk_name }} sdk/
        cp key-build sdk/
    - name: Download Packages
      id: install_feeds
      working-directory: sdk
      run: |
        # Update and install feeds
        ./scripts/feeds update -a
        ./scripts/feeds install golang c-ares libev libopenssl libsodium mbedtls pcre ca-bundle luci-base

        # My own packages
        git clone --depth=1 https://github.com/icyleaf/openwrt-packages package/icyleaf

        # Clash
        git clone -b master https://github.com/vernesong/OpenClash package/openclash
        # mosdns

        rm -rf packages/net/v2ray-geodata
        git clone --depth=1 https://github.com/sbwml/luci-app-mosdns.git package/luci-app-mosdns
        git clone --depth=1 https://github.com/sbwml/v2ray-geodata package/v2ray-geodata
        rm -rf package/luci-app-mosdns/mosdns

        # # po2lmo
        # git clone -b master https://github.com/aa65535/openwrt-dist-luci package/openwrt-dist-luci
        # pushd package/openwrt-dist-luci/tools/po2lmo ; make && sudo make install ; popd

        # Remove old version packages (custom packages)
        rm -rf package/feed/packages/tailscale
        rm -rf package/icyleaf/network/tailscale
    - name: Generate .config
      working-directory: sdk
      run: |
        make defconfig
        cat .config
    - name: Compile
      id: compile
      working-directory: sdk
      run: |
        make -j$(nproc) || make -j1 V=sc
        # post-compile
    - name: Organize packages
      id: organize
      working-directory: sdk
      if: steps.compile.outcome == 'success'
      run: |
        mkdir -p public/${{ env.sdk_branch }}
        mv bin/packages/*/base/* public/${{ env.sdk_branch }}
    - name: Generate Directory Listings
      uses: jayanta525/github-pages-directory-listing@v2.0.0
      if: steps.compile.outcome == 'success'
      with:
        FOLDER: ./sdk/public
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      if: steps.organize.outcome == 'success'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./sdk/public
        enable_jekyll: true
        keep_files: true
    # - name: Post-Upload
    #   if: steps.compile.outcome == 'true'
    #   working-directory: sdk
    #   run: |
    #     # Remove dirty resource to cache
    #     ./scripts/feeds clean
    #     make clean
    #     rm -f .config

