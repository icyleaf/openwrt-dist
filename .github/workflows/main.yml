name: Openwrt Build Bot
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  schedule:
    - cron: 0 0 * * */7
  workflow_dispatch:

jobs:
  dist:
    name: Build Openwrt Package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        url:
        - https://downloads.immortalwrt.org/releases/23.05.4/targets/x86/64/immortalwrt-sdk-23.05.4-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz
        - https://downloads.immortalwrt.org/releases/24.10.2/targets/x86/64/immortalwrt-sdk-24.10.2-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
        - https://downloads.immortalwrt.org/releases/24.10.2/targets/mediatek/filogic/immortalwrt-sdk-24.10.2-mediatek-filogic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
    steps:
    - uses: actions/checkout@master
    - name: Free Disk Space
      uses: jlumbroso/free-disk-space@main
      with:
        large-packages: false
        docker-images: false
    - name: Initialization environment
      run: sudo apt update && sudo apt install -y libev-dev libc-ares-dev libudns-dev libncurses-dev
    - name: Prepare enviroment
      run: |
        if [[ "${{ matrix.url }}" =~ ".tar.zst" ]]; then
          echo "sdk_name=$(echo $(basename ${{ matrix.url }}) | head -c -9)" >> $GITHUB_ENV
        else
          echo "sdk_name=$(echo $(basename ${{ matrix.url }}) | head -c -8)" >> $GITHUB_ENV
        fi
        echo "sdk_branch=$(sed -n 's/.*\/\(\S*\)\/targets\/\(\w*\)\/\(\w*\)\/.*/\1\/packages\/\2\/\3/p' <<< ${{ matrix.url }})" >> $GITHUB_ENV

    - name: Debug variables
      run: |
        echo sdk_name: ${{ env.sdk_name }}
        echo sdk_branch: ${{ env.sdk_branch }}

    # NOTE: Unarchived file size over 10G can not cache by github action.
    # - name: Cache SDK
    #   id: cache-sdk
    #   uses: actions/cache@v3
    #   with:
    #     path: sdk
    #     key: ${{ runner.os }}-${{ env.sdk_name }}

    - name: Download Openwrt SDK
      # if: steps.cache-sdk.outputs.cache-hit != 'true'
      run: |
        if [[ "${{ matrix.url }}" =~ ".tar.zst" ]]; then
          curl ${{ matrix.url }} | tar --zstd -x
        else
          curl ${{ matrix.url }} | tar -xJ
        fi
        mv ${{ env.sdk_name }} sdk/
        cp key-build sdk/

    - name: Download Packages
      id: install_feeds
      working-directory: sdk
      run: |
        # Update and install feeds
        ./scripts/feeds update -a
        ./scripts/feeds install golang c-ares libev libopenssl libsodium mbedtls pcre ca-bundle luci-base

        # My own packages
        git clone --depth=1 https://github.com/icyleaf/openwrt-packages package/icyleaf

        # Clash
        git clone --depth=1 -b master https://github.com/vernesong/OpenClash package/openclash

        # log viewer
        git clone --depth=1 -b master https://github.com/gSpotx2f/luci-app-log.git

        # nikki
        git clone --depth=1 -b main https://github.com/nikkinikki-org/OpenWrt-nikki.git

        # mosdns
        rm -rf packages/net/v2ray-geodata
        git clone --depth=1 https://github.com/sbwml/luci-app-mosdns.git -b v5 package/luci-app-mosdns
        git clone --depth=1 https://github.com/sbwml/v2ray-geodata package/v2ray-geodata
        rm -rf package/luci-app-mosdns/mosdns

        # # po2lmo
        # git clone --depth=1 -b master https://github.com/aa65535/openwrt-dist-luci package/openwrt-dist-luci
        # pushd package/openwrt-dist-luci/tools/po2lmo ; make && sudo make install ; popd

    - name: Generate .config
      working-directory: sdk
      run: |
        make defconfig
        cat .config

    - name: Compile
      id: compile
      working-directory: sdk
      run: |
        make -j$(nproc) || make -j1 V=sc

    - name: Organize packages
      id: organize
      working-directory: sdk
      if: steps.compile.outcome == 'success'
      run: |
        mkdir -p public/${{ env.sdk_branch }}
        mv bin/packages/*/base/* public/${{ env.sdk_branch }}

    - name: Generate Directory Listings
      uses: jayanta525/github-pages-directory-listing@v4.0.0
      if: steps.compile.outcome == 'success'
      with:
        FOLDER: ./sdk/public

    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      if: steps.organize.outcome == 'success'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./sdk/public
        enable_jekyll: true
        keep_files: true

